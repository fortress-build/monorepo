import type { Address } from "./Address";
import type { Age } from "./Age";
import type { Annotation } from "./Annotation";
import type { Attachment } from "./Attachment";
import type { CodeableConcept } from "./CodeableConcept";
import type { Coding } from "./Coding";
import type { ContactDetail } from "./ContactDetail";
import type { ContactPoint } from "./ContactPoint";
import type { Contributor } from "./Contributor";
import type { Count } from "./Count";
import type { DataRequirement } from "./DataRequirement";
import type { Distance } from "./Distance";
import type { Dosage } from "./Dosage";
import type { Duration } from "./Duration";
import type { Expression } from "./Expression";
import type { HumanName } from "./HumanName";
import type { Identifier } from "./Identifier";
import type { Meta } from "./Meta";
import type { Money } from "./Money";
import type { ParameterDefinition } from "./ParameterDefinition";
import type { Period } from "./Period";
import type { Quantity } from "./Quantity";
import type { Range } from "./Range";
import type { Ratio } from "./Ratio";
import type { Reference } from "./Reference";
import type { RelatedArtifact } from "./RelatedArtifact";
import type { Resource } from "./Resource";
import type { SampledData } from "./SampledData";
import type { Signature } from "./Signature";
import type { Timing } from "./Timing";
import type { TriggerDefinition } from "./TriggerDefinition";
import type { UsageContext } from "./UsageContext";

export declare class ElementDefinitionSlicingDiscriminator {
  type: 'value' | 'exists' | 'pattern' | 'type' | 'profile';
  path: string;
}

export declare class ElementDefinitionSlicing {
  discriminator?: ElementDefinitionSlicingDiscriminator[];
  description?: string;
  ordered?: boolean;
  rules: 'closed' | 'open' | 'openAtEnd';
}

export declare class ElementDefinitionType {
  code: string;
  profile?: string[];
  targetProfile?: string[];
  aggregation?: Array<'contained' | 'referenced' | 'bundled'>;
  versioning?: 'either' | 'independent' | 'specific';
}

// Convert validation schemas to types
export declare class ElementDefinitionBase {
  path: string;
  min: number;
  max: string;
}

export declare class ElementDefinitionBinding {
  strength: 'required' | 'extensible' | 'preferred' | 'example';
  description?: string;
  valueSet?: string;
}

export declare class ElementDefinitionConstraint {
  key: string;
  requirements?: string;
  severity: 'error' | 'warning';
  human: string;
  expression?: string;
  xpath?: string;
  source?: string;
}

export declare class ElementDefinitionExample {
  label: string;
  valueBase64Binary?: string;
  valueBoolean?: boolean;
  valueCanonical?: string;
  valueCode: string;
  valueDate: string;
  valueDateTime: string;
  valueDecimal: number;
  valueId: string;
  valueInstant: string;
  valueInteger: number;
  valueMarkdown: string;
  valueOid: string;
  valuePositiveInt: number;
  valueString: string;
  valueTime: string;
  valueUnsignedInt: number;
  valueUri: string;
  valueUrl: string;
  valueUuid: string;
  valueAddress: Address;
  valueAge: Age;
  valueAnnotation: Annotation;
  valueAttachment: Attachment;
  valueCodeableConcept: CodeableConcept;
  valueCoding: Coding;
  valueContactPoint: ContactPoint;
  valueCount: Count;
  valueDistance: Distance;
  valueDuration: Duration;
  valueHumanName: HumanName;
  valueIdentifier: Identifier;
  valueMoney: Money;
  valuePeriod: Period;
  valueQuantity: Quantity;
  valueRange: Range;
  valueRatio: Ratio;
  valueReference: Reference<Resource>;
  valueSampledData: SampledData;
  valueSignature: Signature;
  valueTiming: Timing;
  valueContactDetail: ContactDetail;
  valueContributor: Contributor;
  valueDataRequirement: DataRequirement;
  valueExpression: Expression;
  valueParameterDefinition: ParameterDefinition;
  valueRelatedArtifact: RelatedArtifact;
  valueTriggerDefinition: TriggerDefinition;
  valueUsageContext: UsageContext;
  valueDosage: Dosage;
  valueMeta: Meta;
}

declare class ElementDefinitionMapping {
  identity: string;
  language?: string;
  map: string;
  comment?: string;
}

// Main ElementDefinition type
export declare class ElementDefinition {
  path: string;
  representation?: Array<'xmlAttr' | 'xmlText' | 'typeAttr' | 'cdaText' | 'xhtml'>;
  sliceName?: string;
  sliceIsConstraining?: boolean;
  label?: string;
  code?: Coding[];
  slicing?: ElementDefinitionSlicing;
  short?: string;
  definition?: string;
  comment?: string;
  requirements?: string;
  alias?: string[];
  min?: number;
  max?: string;
  base?: ElementDefinitionBase;
  contentReference?: string;
  type?: ElementDefinitionType[];
  defaultValueBase64Binary?: string;
  defaultValueBoolean?: boolean;
  defaultValueCanonical?: string;
  defaultValueCode?: string;
  defaultValueDate?: string;
  defaultValueDateTime?: string;
  defaultValueDecimal?: number;
  defaultValueId?: string;
  defaultValueInstant?: string;
  defaultValueInteger?: number;
  defaultValueMarkdown?: string;
  defaultValueOid?: string;
  defaultValuePositiveInt?: number;
  defaultValueString?: string;
  defaultValueTime?: string;
  defaultValueUnsignedInt?: number;
  defaultValueUri?: string;
  defaultValueUrl?: string;
  defaultValueUuid?: string;
  defaultValueAddress?: Address;
  defaultValueAge?: Age;
  defaultValueAnnotation?: Annotation;
  defaultValueAttachment?: Attachment;
  defaultValueCodeableConcept?: CodeableConcept;
  defaultValueCoding?: Coding;
  defaultValueContactPoint?: ContactPoint;
  defaultValueCount?: Count;
  defaultValueDistance?: Distance;
  defaultValueDuration?: Duration;
  defaultValueHumanName?: HumanName;
  defaultValueIdentifier?: Identifier;
  defaultValueMoney?: Money;
  defaultValuePeriod?: Period;
  defaultValueQuantity?: Quantity;
  defaultValueRange?: Range;
  defaultValueRatio?: Ratio;
  defaultValueReference?: Reference<Resource>;;
  defaultValueSampledData?: SampledData;
  defaultValueSignature?: Signature;
  defaultValueTiming?: Timing;
  defaultValueContactDetail?: ContactDetail;
  defaultValueContributor?: Contributor;
  defaultValueDataRequirement?: DataRequirement;
  defaultValueExpression?: Expression;
  defaultValueParameterDefinition?: ParameterDefinition;
  defaultValueRelatedArtifact?: RelatedArtifact;
  defaultValueTriggerDefinition?: TriggerDefinition;
  defaultValueUsageContext?: UsageContext;
  defaultValueDosage?: Dosage;
  defaultValueMeta?: Meta;
  meaningWhenMissing?: string;
  orderMeaning?: string;
  fixedBase64Binary?: string;
  fixedBoolean?: boolean;
  fixedCanonical?: string;
  fixedCode?: string;
  fixedDate?: string;
  fixedDateTime?: string;
  fixedDecimal?: number;
  fixedId?: string;
  fixedInstant?: string;
  fixedInteger?: number;
  fixedMarkdown?: string;
  fixedOid?: string;
  fixedPositiveInt?: number;
  fixedString?: string;
  fixedTime?: string;
  fixedUnsignedInt?: number;
  fixedUri?: string;
  fixedUrl?: string;
  fixedUuid?: string;
  fixedAddress?: Address;
  fixedAge?: Age;
  fixedAnnotation?: Annotation;
  fixedAttachment?: Attachment;
  fixedCodeableConcept?: CodeableConcept;
  fixedCoding?: Coding;
  fixedContactPoint?: ContactPoint;
  fixedCount?: Count;
  fixedDistance?: Distance;
  fixedDuration?: Duration;
  fixedHumanName?: HumanName;
  fixedIdentifier?: Identifier;
  fixedMoney?: Money;
  fixedPeriod?: Period;
  fixedQuantity?: Quantity;
  fixedRange?: Range;
  fixedRatio?: Ratio;
  fixedReference?: Reference<Resource>;;
  fixedSampledData?: SampledData;
  fixedSignature?: Signature;
  fixedTiming?: Timing;
  fixedContactDetail?: ContactDetail;
  fixedContributor?: Contributor;
  fixedDataRequirement?: DataRequirement;
  fixedExpression?: Expression;
  fixedParameterDefinition?: ParameterDefinition;
  fixedRelatedArtifact?: RelatedArtifact;
  fixedTriggerDefinition?: TriggerDefinition;
  fixedUsageContext?: UsageContext;
  fixedDosage?: Dosage;
  fixedMeta?: Meta;
  patternBase64Binary?: string;
  patternBoolean?: boolean;
  patternCanonical?: string;
  patternCode?: string;
  patternDate?: string;
  patternDateTime?: string;
  patternDecimal?: number;
  patternId?: string;
  patternInstant?: string;
  patternInteger?: number;
  patternMarkdown?: string;
  patternOid?: string;
  patternPositiveInt?: number;
  patternString?: string;
  patternTime?: string;
  patternUnsignedInt?: number;
  patternUri?: string;
  patternUrl?: string;
  patternUuid?: string;
  patternAddress?: Address;
  patternAge?: Age;
  patternAnnotation?: Annotation;
  patternAttachment?: Attachment;
  patternCodeableConcept?: CodeableConcept;
  patternCoding?: Coding;
  patternContactPoint?: ContactPoint;
  patternCount?: Count;
  patternDistance?: Distance;
  patternDuration?: Duration;
  patternHumanName?: HumanName;
  patternIdentifier?: Identifier;
  patternMoney?: Money;
  patternPeriod?: Period;
  patternQuantity?: Quantity;
  patternRange?: Range;
  patternRatio?: Ratio;
  patternReference?: Reference<Resource>;;
  patternSampledData?: SampledData;
  patternSignature?: Signature;
  patternTiming?: Timing;
  patternContactDetail?: ContactDetail;
  patternContributor?: Contributor;
  patternDataRequirement?: DataRequirement;
  patternExpression?: Expression;
  patternParameterDefinition?: ParameterDefinition;
  patternRelatedArtifact?: RelatedArtifact;
  patternTriggerDefinition?: TriggerDefinition;
  patternUsageContext?: UsageContext;
  patternDosage?: Dosage;
  patternMeta?: Meta;
  example?: ElementDefinitionExample[];
  minValueDate?: string;
  minValueDateTime?: string;
  minValueInstant?: string;
  minValueTime?: string;
  minValueDecimal?: number;
  minValueInteger?: number;
  minValuePositiveInt?: number;
  minValueUnsignedInt?: number;
  minValueQuantity?: Quantity;
  maxValueDate?: string;
  maxValueDateTime?: string;
  maxValueInstant?: string;
  maxValueTime?: string;
  maxValueDecimal?: number;
  maxValueInteger?: number;
  maxValuePositiveInt?: number;
  maxValueUnsignedInt?: number;
  maxValueQuantity?: Quantity;
  maxLength?: number;
  condition?: string[];
  constraint?: ElementDefinitionConstraint[];
  mustSupport?: boolean;
  isModifier?: boolean;
  isModifierReason?: string;
  isSummary?: boolean;
  binding?: ElementDefinitionBinding;
  mapping?: ElementDefinitionMapping[];
}
